package ${BASE_PACKAGE}.${END_PACKAGE_SERVICE_IMPL};

import ${BASE_PACKAGE}.${END_PACKAGE_ENTITY}.${CLASS_NAME}${END_NAME_ENTITY};
import ${BASE_PACKAGE}.${END_PACKAGE_MAPPER}.${CLASS_NAME}${END_NAME_MAPPER};
import ${BASE_PACKAGE}.${END_PACKAGE_SERVICE}.${CLASS_NAME}${END_NAME_SERVICE};
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;

/**
 * ${TABLE_COMMENT} - ${END_NAME_SERVICE_IMPL}
 *
 * @author ${AUTHOR}
 * @date ${DATE}
 */
@Slf4j
@Service
public class ${CLASS_NAME}${END_NAME_SERVICE_IMPL} implements ${CLASS_NAME}${END_NAME_SERVICE} {

    private static final String EVENT = "${TABLE_COMMENT}";

    @Autowired
    private ${CLASS_NAME}${END_NAME_MAPPER} mapper;

    @Override
    public boolean insert(${CLASS_NAME}${END_NAME_ENTITY} item) {
        try {
            return mapper.insert(item) > 0;
        } catch (Exception e) {
            log.error(String.format("%s-保存失败：item=%s", EVENT, item), e);
            throw new RuntimeException(String.format("%s-保存失败", EVENT));
        }
    }

    @Override
    public boolean batchInsert(List<${CLASS_NAME}${END_NAME_ENTITY}> list) {
        try {
            return mapper.batchInsert(list) > 0;
        } catch (Exception e) {
            log.error(String.format("%s-批量保存失败：list=%s", EVENT, list), e);
            throw new RuntimeException(String.format("%s-批量保存失败", EVENT));
        }
    }

    @Override
    public boolean updateBy${PK_FIELD_NAME_UPPER_FIRST}(${CLASS_NAME}${END_NAME_ENTITY} item) {
        try {
            item.setUpdateTime(new Date());
            return mapper.updateBy${PK_FIELD_NAME_UPPER_FIRST}(item) > 0;
        } catch (Exception e) {
            log.error(String.format("%s-更新失败：item=%s", EVENT, item), e);
            throw new RuntimeException(String.format("%s-更新失败", EVENT));
        }
    }

    @Override
    public boolean updateByParam(${CLASS_NAME}${END_NAME_ENTITY} item, ${CLASS_NAME}${END_NAME_ENTITY} param) {
        try {
            item.setUpdateTime(new Date());
            param.setIsDeleted(0);
            return mapper.updateByParam(item, param) > 0;
        } catch (Exception e) {
            log.error(String.format("%s-更新失败：item=%s, param=%s", EVENT, item, param), e);
            throw new RuntimeException(String.format("%s-更新失败", EVENT));
        }
    }

    @Override
    public int logicDeleteBy${PK_FIELD_NAME_UPPER_FIRST}s(List<${PK_FIELD_TYPE}> ${PK_FIELD_NAME}s, String updatedBy) {
        try {
            int total = ${PK_FIELD_NAME}s.size();
            int success = mapper.logicDeleteBy${PK_FIELD_NAME_UPPER_FIRST}s(${PK_FIELD_NAME}s, updatedBy);
            log.info("{}-批量逻辑删除：${PK_FIELD_NAME}s={}, updatedBy={}, total={}, success={}, fail={}",
                    EVENT, ${PK_FIELD_NAME}s, updatedBy, total, success, total - success);
            return success;
        } catch (Exception e) {
            log.error(String.format("%s-批量逻辑删除失败：${PK_FIELD_NAME}s=%s, updatedBy=%s", EVENT, ${PK_FIELD_NAME}s, updatedBy), e);
            throw new RuntimeException(String.format("%s-批量逻辑删除失败", EVENT));
        }
    }

    @Override
    public ${CLASS_NAME}${END_NAME_ENTITY} selectBy${PK_FIELD_NAME_UPPER_FIRST}(${PK_FIELD_TYPE} ${PK_FIELD_NAME}) {
        try {
            return mapper.selectBy${PK_FIELD_NAME_UPPER_FIRST}(${PK_FIELD_NAME});
        } catch (Exception e) {
            log.error(String.format("%s-查询失败：${PK_FIELD_NAME}=%s", EVENT, ${PK_FIELD_NAME}), e);
            throw new RuntimeException(String.format("%s-查询失败", EVENT));
        }
    }

    @Override
    public List<${CLASS_NAME}${END_NAME_ENTITY}> selectBy${PK_FIELD_NAME_UPPER_FIRST}s(List<${PK_FIELD_TYPE}> ${PK_FIELD_NAME}s) {
        try {
            return mapper.selectBy${PK_FIELD_NAME_UPPER_FIRST}s(${PK_FIELD_NAME}s);
        } catch (Exception e) {
            log.error(String.format("%s-查询失败：${PK_FIELD_NAME}s=%s", EVENT, ${PK_FIELD_NAME}s), e);
            throw new RuntimeException(String.format("%s-查询失败", EVENT));
        }
    }

    @Override
    public List<${CLASS_NAME}${END_NAME_ENTITY}> selectByParam(${CLASS_NAME}${END_NAME_ENTITY} param) {
        try {
            param.setIsDeleted(0);
            return mapper.selectByParam(param);
        } catch (Exception e) {
            log.error(String.format("%s-查询失败：param=%s", EVENT, param), e);
            throw new RuntimeException(String.format("%s-查询失败", EVENT));
        }
    }

    @Override
    public int selectCount(${CLASS_NAME}${END_NAME_ENTITY} param) {
        try {
            param.setIsDeleted(0);
            return mapper.selectCount(param);
        } catch (Exception e) {
            log.error(String.format("%s-查询数量失败：param=%s", EVENT, param), e);
            throw new RuntimeException(String.format("%s-查询数量失败", EVENT));
        }
    }

    @Override
    public List<${CLASS_NAME}${END_NAME_ENTITY}> selectByPage(${CLASS_NAME}${END_NAME_ENTITY} param, Integer start, Integer length) {
        try {
            param.setIsDeleted(0);
            return mapper.selectByPage(param, start, length);
        } catch (Exception e) {
            log.error(String.format("%s-分页查询失败：param=%s, start=%s, length=%s", EVENT, param, start, length), e);
            throw new RuntimeException(String.format("%s-分页查询失败", EVENT));
        }
    }

}